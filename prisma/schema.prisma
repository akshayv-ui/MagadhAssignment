// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserType {
  Admin
  Retail
}

model Users {
  id              String            @id @default(uuid())
  userType        UserType          @default(Retail)
  name            String
  email           String            @unique
  password        String            @default("$2a$12$iMwZodMdt4UCrPTFeH8TIenUYB/uR3YX4QfqGOWUZGAhTWNp.vlju")
  PurchaseHistory PurchaseHistory[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Books           Books?            @relation(fields: [booksId], references: [id])
  booksId         String?
  UserTokens      UserTokens[]

  @@unique([id])
  @@index([id])
}

model UserTokens {
  id           String   @id @default(uuid())
  userId       String
  User         Users    @relation(fields: [userId], references: [id])
  accessToken  String
  refreshToken String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([id])
  @@index([id])
}

model Author {
  id         String       @id @default(uuid())
  name       String
  descrption String?
  email      String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  booksId    String?
  BookAuthor BookAuthor[]

  @@unique([id])
  @@index([id])
}

model Books {
  id              String            @id @default(uuid())
  title           String
  description     String?
  price           Int               @default(100)
  totalQuantity   Int               @default(0)
  availableCount  Int               @default(0)
  sellCount       Int               @default(0)
  PurchaseHistory PurchaseHistory[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  Users           Users[]
  BookAuthor      BookAuthor[]

  @@unique([id, title])
}

model BookAuthor {
  bookId    String
  authorId  String
  active    Boolean  @default(true)
  Author    Author   @relation(fields: [authorId], references: [id])
  Books     Books    @relation(fields: [bookId], references: [id])
  createdOn DateTime @default(now())

  @@id([bookId, authorId])
}

model PurchaseHistory {
  id           String   @id @default(uuid())
  invoice      String
  purchaseId   String
  bookId       String
  userId       String
  purchaseDate DateTime @default(now())
  price        Int
  quantity     Int      @default(1)
  active       Boolean  @default(true)
  Books        Books    @relation(fields: [bookId], references: [id])
  Users        Users    @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([id])
  @@index([id, purchaseId])
}
